#!/usr/bin/env bash

# Guile, required for libctl, required for MPB and Meep


PACKAGE_NAME="guile"
PACKAGE_VERSION="2.0.11"

dirname=$(dirname $0 2>/dev/null)
INCLUDES_DIR=${INCLUDES_DIR:-${dirname}/includes}
source ${INCLUDES_DIR}/module_maker_inc.sh
source ${INCLUDES_DIR}/require_inc.sh

require compilers/gnu/4.9.2
require libtool/2.4.6 
require libbdwgc/7.4.2

set -e

_env_setup() {
  OWD=$(pwd)
  INSTALL_PREFIX=${INSTALL_PREFIX:-/shared/ucl/apps/${PACKAGE_NAME}/${PACKAGE_VERSION}/${COMPILER_TAG}}
  BUILD_DIR=${BUILD_DIR:-$(mktemp -d)}
  MODULE_DIR=${MODULE_DIR:-$(mktemp -d)}
  SRC_URLS=ftp://ftp.gnu.org/gnu/guile/guile-${PACKAGE_VERSION}.tar.gz

  # Annoyingly, guile fails tests with the Intel compiler and has for at least 2 years
  # Like this: http://lists.gnu.org/archive/html/guile-user/2013-10/msg00009.html
  if [ "$(basename ${CC})" == "icc" ]; then
    echo "Error: trying to build guile with the Intel compiler results in failed tests at the 'make check' stage." >&2
    echo "Suggest overriding the CC variable with gcc, which is known to succeed." >&2
    exit 2
  else
    export CC
    # ^-- just in case it's set but not exported
  fi
}

_fetch_files() {
  cd $BUILD_DIR
  wget $SRC_URLS
  cd $OWD
}

_setup_files() {
  cd $BUILD_DIR
  tar -xf guile-${PACKAGE_VERSION}.tar.gz
  cd $OWD
}

_build() {
  cd $BUILD_DIR
  cd guile-${PACKAGE_VERSION}
  sh ./configure --prefix=$INSTALL_PREFIX --without-threads
  # had to disable threading because of a kernel bug: see the libbdw-gc build script
  make
  make check
  cd $OWD
}

_install() {
  cd $BUILD_DIR/guile-${PACKAGE_VERSION}
  make install
  cd $OWD
  make_module -p $INSTALL_PREFIX \
              -n "${PACKAGE_NAME}" \
              -c "${PACKAGE_NAME}" \
              -r "gcc-libs/4.9.2" \
              -r "libbdwgc/7.4.2" \
              -o $MODULE_DIR/${PACKAGE_NAME}/${PACKAGE_VERSION}/${COMPILER_TAG} \
              -w "Adds guile 2.0.11 to your environment."
  echo "Module files put in: $MODULE_DIR" >&2
}

_clean_up() {
  if [ -n "$BUILD_DIR" ]; then
    rm -Rf ${BUILD_DIR}
  fi
}

_env_setup
_fetch_files
_setup_files
_build
_install
_clean_up
