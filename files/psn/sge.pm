package nonmemrun::sge;

use include_modules;
use Moose;
use MooseX::Params::Validate;
use autodie; # die with error message if fail to write to file

extends 'nonmemrun';

has 'resource' => ( is => 'rw', isa => 'Maybe[Str]' );
has 'queue' => ( is => 'rw', isa => 'Maybe[Str]' );

sub submit
{
        my $self = shift;
        my $jobId = -1;

        $self->pre_compile_cleanup;

        #only support nmfe here, not nmqual

        my $command = $self->create_command;

        my $jobname = $self->model->filename;
        $jobname = 'psn_' . $jobname if ($jobname =~ /^[0-9]/);

        my $flags = ' -N ' . $jobname . ' -cwd';

        if (defined $self->prepend_flags) {
                $flags = ' ' . $self->prepend_flags . $flags;
        }

        my $submitstring = $flags .
                ($self->resource ? ' -l ' . $self->resource . ' ' : ' ') .
                ($self->queue ? '-q ' . $self->queue . ' ' : ' ') . $command;
        my $selfresource = $self->resource ? ' -l ' . $self->resource . ' ' : ' ';
        my $selfqueue = $self->queue ? '-q ' . $self->queue . ' ' : ' ';
        my $selfnm_version = $self->full_path_runscript;

        # Alterations to write out a jobscript that is then qsubbed
        my $jobscript = "$jobname.sh";
        # Check whether a parafile is given, if so, put gerun in script
        # and generate parafile.
        my $runcommand = "";
        #my $paracommand = "# Serial job, no parafile needed";
        # The parafile name is anything following -parafile= that isn't whitespace
        # and ends in a quote. The result will be in $1. 
        # (PsN inserts the quotes around "-parafile=name" when it creates $command).
        print $command;
        #if ($command =~ /-parafile=(\S*)"/) {
        #        $runcommand = "gerun ";
        #        $paracommand = "parafile.sh \$TMPDIR/machines > $1";
        #}

        print "\nWriting jobscript: $jobscript\n";
        open(my $file_handle, '>', $jobscript);
        # Print different jobscripts depending on nm_version - different modules.
        # (The qq part can't be indented or the indents will print)
        if ($selfnm_version =~ /\/shared\/ucl\/apps\/NONMEM\/nm730_Intel\/run\/nmfe73/) {
                $file_handle->print(
qq|#!/bin/bash -l
#\$ -S /bin/bash

#Jobscript generated by PsN - nm_version=serial

#\$$flags
#\$$selfresource
#\$$selfqueue

module unload compilers
module unload mpi
module load compilers/intel/2015/update2
module load mpi/intel/2015/update3/intel
module load nonmem/7.3.0/intel-2015-update2
module load perl/5.22.0
                
$runcommand$command

|);

                close $file_handle;
        }
        # Change this if you need to use a qsub wrapper script.
        my $qsub = "qsub";

        system('echo '.$qsub.' '.$jobscript.' > qsubcommand');
        my $outp = readpipe("$qsub $jobscript 2>&1");

        chomp($outp);

        if ($outp =~ /^Your job (\d+)/) {
                $jobId = $1;
        } else {
                print "SGE submit failed.\nSystem error message: $outp\nConsidering this model failed.\n";
                system('echo ' . $outp . ' > job_submission_error');
                $jobId = -1;
        }
        system('echo '.$jobId.' > jobId');

        $self->job_id($jobId);
        return $jobId;
}


sub monitor
{
        my $self = shift;
        my $jobId = $self->job_id;

        my $response = `qstat -j $jobId 2>&1`;

        if ($response =~ /Following jobs do not exist/) {
                return $jobId;
        } elsif ($response =~ /^usage: qstat/) {
                return $jobId;
        }

        return 0;
}

no Moose;
__PACKAGE__->meta->make_immutable;
1;

